 嗯,大家好,上次我们讲的UV,我推荐用UV来做这个包管理器
 那么新项目的Linter和Code foratter,我推荐什么呢?
 就是今天要讲的这个ruff
 ruff是一个Python写的Linter和那个代码格式化工具
 和UV一样也是出自于这个Astro这个公司。
你有可能听说过 flake8，black，isort，pylint 等这些 linter 或 formatter 工具，
但现在，呃，基本上它们都不需要了，
你只需要一个 ruff 就可以把它们的工作做完了，all-in-one。
从官网上你可以看到，
呃，它比现有的 linters (如 Flake8) 和格式化程序 (如 Black) 要快 10 到 100 倍。
和 uv 一样啊，ruff 它也是用 Rust 写的，嗯，
所以这个工具速度比这些 Python 写的工具要快很多。
然后现在有很多那个知名的 Python 项目其实都在用这个 ruff，
比如说 FastAPI，Hugging Face Transformers，Pandas 等项目都在用这个。
然后我们就说一下，怎么在项目里面把这个 ruff 用起来吧。
上次我们介绍了这个 uv，
这次我们其实可以用 uv tool install ruff 就直接可以安装了。
这个我也是安装好的，嗯，然后它会装在哪儿呢？ 
或者用那个 which ruff 看一看。 然后它会安装到 ~/.local/bin/ruff 下面。 嗯，这可能会需要那个，用那个 uv tool update-shell，就是说，嗯，把它放在这个环境变量里面。
嗯，OK，然后这些做完了以后，我用 ruff version 看一下，看那个是不是装好了。
OK，然后我这儿就是说是用那个 Cursor 打开一个 Python 项目，
也就是打开你自己的项目。 
其实其他 VS Code 的，呃，VS Code fork 都可以来做这个事情。
OK，嗯，首先是我们在那个 VS Code 的市场里面啊，
把这个 ruff 插件装上。 就 VS Code 的市场里面把这个装上就行了。
嗯，接着我们打开这个工作空间的配置啊，就是一个 JSON 文件。
 嗯，然后配置下这个 Python 这个语言的，嗯，关于 ruff 的一些配置。 
 其实就是那个，当它保存的时候，调用 ruff。
嗯，接着在 pyproject.toml 文件里面，把这个 ruff 的一些配置加上。
 就是它的检查格式化长度，就是超过，嗯，120 的我在设置。 
 这里可以是设置小一点。反正就是说是，嗯，让它格式化的时候就是以 120 来作为一个，嗯，长度的基准。
  就每一行不要超过 120，它作为基准。 
  类似那个 Black 那样来格式化。
然后下面的话就是，其他一些 lint 检查工具的规则。
 有那个 Pyflakes 的，有那个 Pycodestyle 的，还有 Flake8 的一些插件规则
 ，比如 flake8-bugbear，pep8-naming 等等。 嗯，这些就是说是一些规则。
  嗯，它会检查。 
  嗯，然后最后是这个 Isort，就是把这个 "I" 选上，就是说，嗯，像 Isort 那样，嗯，格式化你的那个 Python 的导入。
嗯，这样当我们那个修改代码保存的时候，ruff 就会自动格式化代码并整理导入。
嗯，比如说这儿它那个显示就是说是，嗯，这个导入是乱的。
 嗯，就那个，把它改一下，保存一下。
  然后你看它就自动的帮你那个格式化这个导入。
   就是说是标准库在这里面，然后那个三方库在中间，就是本地，就是本工程的导入在那个最下面。
嗯，你也可以在诊断中看到工程里面所有的问题进行修复。
 有些问题，我们可以直接用一个 command + . (macOS) 或者 Ctrl + . (Windows/Linux) 来让它自动修复，
 比如说这是这个格式化的问题。 然后按 command + .。
嗯，就可以看到它会给建议。 
就直接 disable 肯定不合适。 
就用这个，嗯，用这种方式的话，就合适一点。 
然后它，这个不是每个地方都会给建议。 有些地方需要你自己修复。
 比如说是那个长度，呃，每一行长度太长了。
  它这个肯定是没办法帮你修复的。
   这就需要，比如说你字符串太长了，就是需要你自己去改。 OK。
嗯，但有些问题，它如果是没有提供那个建议的话。 
嗯，其实实话，我们可以用那个 AI 来改。
 比如说在 Cursor 里，直接选中有问题的代码，command + k 呼出 AI。
  然后选择小模型就可以改这个问题。
   就对它是让那个记录一个异常。 嗯，就告诉它提示词。
    然后就可以帮你改，让 AI 帮你改。
     反正也是 AI 那个写的东西，让 AI 来修复也挺合适的。
这上面的话就是有一个导入，也可以考虑用 Cursor + Tab 来修复，AI 很聪明的。
 然后看着它又把这个导入重新格式化了。 OK。
然后其实你也可以用那个 ruff 的命令行来检查代码，
比如 ruff check .。 然后就可以，嗯，检查了工程的问题。 
或者用 ruff check --fix . 来自动修复。 
这个适合用在那个 CI 里面。 嗯，就是你提交代码，马上就帮你检查一下代码哪里有问题。
OK。今天差不多就这样子。
啊，谢谢大家观看。